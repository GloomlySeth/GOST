<?php

/**
 * Implements hook_menu().
 */
function processing_menu()
{
  $items['processing_get_json'] = array(
    'page callback' => 'processing_get_json',
    'type' => MENU_CALLBACK,
    'access arguments' => array(
      'access content',
    ),
  );

  $items['processing_get_ajax'] = array(
    'page callback' => 'processing_get_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array(
      'access content',
    ),
  );

  return $items;
}

/**
 * Page api callback
 */
function processing_get_json()
{
  $post = file_get_contents("php://input", TRUE);

  $log = date('Y-m-d H:i:s') . ' ';
  $log .= is_string($post) ? $post : json_encode($post);
  $log .= PHP_EOL;

  file_put_contents('log_processing.log', $log, FILE_APPEND | LOCK_EX);

  if ($post) {
    $json = drupal_json_decode($post);

    $node = node_load($json['demand_id']);
    $updated = db_merge('processing')
      ->key(array('entity_id' => $json['fid']));
    if ($json['percent'] == 100) {
      $updated->fields(array(
        'percent' => $json['percent'],
        'status' => 'Готов',
        'demand_id' => $json['demand_id'],
        'demand' => $node->title,
      ));
    } else {
      $updated->fields(array(
        'percent' => $json['percent'],
        'status' => 'В обработке',
        'demand_id' => $json['demand_id'],
        'demand' => $node->title,
      ));
    }

    $updated->execute();
  }

  drupal_json_output(array('result' => 'OK'));
  drupal_exit();
}

/**
 * Implements hook_preprocess_page().
 */
function processing_preprocess_page($variables){
  if(arg(0) == 'document_list'){
    global $user;
    $setting = array('processing' => array('user_id' => $user->uid));
    drupal_add_js($setting, 'setting');
    drupal_add_js(drupal_get_path('module', 'processing') . '/js/procent.js');
  }
}

/**
 * Page aax callback
 */
function processing_get_ajax()
{
  $post = file_get_contents("php://input", TRUE);

  if ($post) {

   $query = db_query("SELECT file_managed.fid AS fid, file_managed.timestamp AS file_managed_timestamp, processing.status AS processing_status, processing.demand AS processing_demand, processing.percent AS processing_percent
FROM {file_managed} file_managed
LEFT JOIN {users} users_file_managed ON file_managed.uid = users_file_managed.uid
LEFT JOIN {processing} processing ON file_managed.fid = processing.entity_id
WHERE (( (users_file_managed.uid = :uid ) )AND(( (file_managed.type IN  ('document')) )))
ORDER BY file_managed_timestamp DESC", array(':uid' => $post))->fetchAll();

    $test = db_query("SELECT file_managed.fid AS fid, processing.status AS processing_status
FROM {file_managed} file_managed
LEFT JOIN {users} users_file_managed ON file_managed.uid = users_file_managed.uid
LEFT JOIN {processing} processing ON file_managed.fid = processing.entity_id
WHERE (( (users_file_managed.uid = :uid ) )AND(( (file_managed.type IN  ('document')) )))AND( (processing.status = :status ) )
", array(':uid' => $post, ':status' => 'В обработке'))->fetchAllKeyed();

    $finish = 'true';
    if(!empty($test)) {
      $finish = 'false';
    }

    drupal_json_output(array('uid' => $post, 'query' => $query, 'finish' => $finish));
    drupal_exit();
  }
}

/**
 * Implements hook_block_info().
 */
function processing_block_info()
{
  $blocks = array();
  $blocks['processing_form_block'] = array(
    'info' => t('Processing form'),
  );
  $blocks['done_processing_block'] = array(
    'info' => t('Done'),
  );
  return $blocks;
}

/**
 * Implements hook_views_api()
 */
function processing_views_api()
{
  return array('api' => 2);
}

/**
 * Implements hook_block_view().
 */
function processing_block_view($delta = '')
{
  if ($delta == 'processing_form_block') {
    $block['subject'] = '';
    $block['content'] = drupal_get_form('processing_form');
  }
  if ($delta == 'done_processing_block') {
    $block['subject'] = '';
    $block['content'] = list_file();
  }
  return $block;
}

function is_empty($node, $value)
{
  $output = field_get_items('node', $node, $value);

  if (!empty($output)) {
    $return = array();
    foreach ($output as $value2) {
      $output2 = field_view_value('node', $node, $value, $value2);

      if (!empty($output2['#markup'])) {
        $return[] = $output2['#markup'];
      } elseif (!empty($output2['#title'])) {
        if ($output2['#title'] == '<span></span>') {
          $return[] = $output2['#options']['entity']->description;
        } else {
          $return[] = $output2['#title'];
        }
      }
    }

    return $return;
  } else return array(NULL);
}

function list_file()
{
  global $base_url;
  global $user;
  $list = '';
  $directory = 'sites/default/files/private/' . $user->uid . '/raw';
  $file = array();
  if (file_exists($directory)) {
    $scanned_directory = array_diff(scandir($directory), array('..', '.'));
    foreach ($scanned_directory as $value) {
      if (is_dir($directory . '/' . $value)) {
        $scanned_directory_y = array_diff(scandir($directory . '/' . $value), array('..', '.'));
        foreach ($scanned_directory_y as $value_y) {
          if (is_dir($directory . '/' . $value . '/' . $value_y) &&
            file_exists($directory . '/' . $value . '/' . $value_y . '/Done')
          ) {
            $scanned_directory_f = array_diff(scandir($directory . '/' . $value . '/' . $value_y . '/Done'), array('..', '.'));
            foreach ($scanned_directory_f as $value_f) {
              $patch = $base_url . '/system/files/' . $user->uid . '/raw/' . $value . '/' . $value_y . '/Done/' . $value_f;
              $file[$patch] = $value_f;
            }
          }
        }
      }
    }
  }
  foreach ($file as $key => $value) {
    $list .= '<div><a href="' . $key . '" download>' . $value . '</a></div>';
  }
  return $list;
}

function processing_file_download($uri)
{
  global $user;
  $uri_arr = explode("/", $uri);
  if ($uri_arr[2] == $user->uid && $uri_arr[6] == 'Done') {
    return array('Content-Type' => 'docx');
  }
}

/**
 * Implements hook_form().
 */
function processing_form($form, &$form_state)
{
  global $user;
  $nodes = db_select('node', 'n');
  $nodes->fields('n', array('nid', 'title'));
  $or = db_or();
  $or->condition('n.uid', $user->uid);
  $or->condition('n.uid', 1);
  $nodes->condition($or);
  $nodes->condition('n.type', 'demand_create');
  $list = $nodes->execute()->fetchAllKeyed();
  $form['list_settings'] = array(
    '#type' => 'select',
    '#title' => t('Demand create'),
    '#options' => $list,
  );

  if (arg(0) == 'file' && arg(1) == 'add') {
    $nodes = db_select('file_managed', 'f');
    $nodes->fields('f', array('fid', 'filename'));
    $nodes->condition('f.uid', $user->uid);
    $list = $nodes->execute()->fetchAllKeyed();
    $form['list_docx'] = array(
      '#type' => 'checkboxes',
      '#title' => '',
      '#options' => $list,
      '#required' => TRUE,
    );
    $form['remove'] = array(
      '#type' => 'submit',
      '#submit' => array('processing_form_remove'),
      '#value' => 'Удалить',
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Начать обработку',
  );

  return $form;
}

function processing_form_validate($form, &$form_state)
{
  if (empty($form_state['values']['list_settings'])
    && $form_state['clicked_button']['#type'] == "submit"
  ) {
    form_error($form, t('Please, create a demand.'));
  }
}

function processing_form_submit($form, &$form_state)
{
  global $user;

  if (arg(0) == 'file' && arg(1) == 'add') {
    $name = $form_state['values']['list_docx'];
  } else {
    $name = array($form_state['values']['files_list']);
  }


  foreach ($name as $keyId => $valueId) {
    if ($valueId != 0) {
      $uri = db_select('file_managed', 'f');
      $uri->fields('f', array('uri', 'filename'));
      $uri->condition('f.fid', $valueId);
      $uri = $uri->execute()->fetchAssoc();
      $url = file_create_url($uri['uri']);
      $nid = $form_state['values']['list_settings'];
      $node = node_load($nid);
      $title_number = array();
      $list_number = array();
      if (!empty($node->field_title_number_r)) {
        foreach ($node->field_title_number_r[LANGUAGE_NONE] as $key => $value) {
          $field_coll = field_collection_item_load($value['revision_id']);
          $title_number[] = array(
            'type' => is_empty($node, 'field_title_number_type2'),
            'view' => is_empty($node, '$field_coll->field_title_number_view2'),
            'ownview' => is_empty($node, 'title_number_ownview2'),
            'setting' => is_empty($node, 'field_title_number_setting2'),
          );
        }
      }
      if (!empty($node->field_list_number_1)) {
        foreach ($node->field_list_number_1[LANGUAGE_NONE] as $key => $value) {
          $field_coll = field_collection_item_load($value['revision_id']);
          $list_number[] = array(
            'type' => is_empty($node, 'field_list_number_type2'),
            'view' => is_empty($node, '$field_coll->field_list_number_view2'),
            'division' => is_empty($node, 'field_list_number_division2'),
            'setting' => is_empty($node, 'field_list_number_setting2'),
          );
        }
      }
      $processing = array(
        'user' => array(
          'uid' => $user->uid,
        ),
        'file' => array(
          'fid' => $valueId,
          'patch' => !empty($url) ? $url : array(NULL),
          'name' => !empty($form['list_docx']['#options'][$valueId]) ? $form['list_docx']['#options'][$valueId] : array(NULL),
        ),
        'demands' => array(
          'did' => $node->nid,
          'name' => $node->title,
          'note' => is_empty($node, 'field_demand_note'),
          'fields' => array(
            'top' => is_empty($node, 'field_fields_top'),
            'bottom' => is_empty($node, 'field_fields_bottom'),
            'left' => is_empty($node, 'field_fields_left'),
            'right' => is_empty($node, 'field_fields_right'),
          ),
          'paper' => array(
            'size' => is_empty($node, 'field_paper_size'),
            'orientation' => is_empty($node, 'field_paper_orientation'),
          ),
          'header' => array(
            'setting' => array(
              'font' => is_empty($node, 'field_header_setting_font'),
              'size' => is_empty($node, 'field_header_setting_size'),
              'align' => is_empty($node, 'field_header_setting_align'),
              'typeface' => is_empty($node, 'field_header_setting_typeface'),
              'color' => is_empty($node, 'field_header_setting_color'),
              'background' => is_empty($node, 'field_header_setting_background'),
              'setting' => is_empty($node, 'field_header_setting_text'),
            ),
            'number' => array(
              'number_page' => is_empty($node, 'field_header_number_page'),
            ),
            'filter' => array(
              'filter_from' => is_empty($node, 'field_header_filter_from'),
              'filter_skip' => is_empty($node, 'field_header_filter_skip'),
            ),
          ),
          'main' => array(
            'font' => array(
              'font' => is_empty($node, 'field_main_font_font'),
              'size' => is_empty($node, 'field_main_font_size'),
              'align' => is_empty($node, 'field_main_font_align'),
              'typeface' => is_empty($node, 'field_main_font_typeface'),
              'color' => is_empty($node, 'field_main_font_color'),
              'background' => is_empty($node, 'field_main_font_background'),
            ),
            'columns' => array(
              'text' => is_empty($node, 'field_main_columns_text'),
              'number' => is_empty($node, 'field_main_columns_number'),
              'division' => is_empty($node, 'field_main_columns_division'),
              'width' => is_empty($node, 'field_main_columns_width'),
            ),
            'margins' => array(
              'left' => is_empty($node, 'field_main_margins_left'),
              'right' => is_empty($node, 'field_main_margins_right'),
              'add_mirror_indent' => is_empty($node, 'field_main_margins_mirror'),
              'str' => is_empty($node, 'field_main_margins_str'),
              'on' => is_empty($node, 'field_main_margins_on'),
              'add_breaks' => is_empty($node, 'field_main_margins_shift'),
            ),
            'interval' => array(
              'on_page_lines' => is_empty($node, 'field_main_interval_page'),
              'count_page_lines' => is_empty($node, 'field_main_interval_page2'),
              'mirror' => is_empty($node, 'field_main_interval_mirror'),
              'left' => is_empty($node, 'field_main_interval_left'),
              'after' => is_empty($node, 'field_main_interval_right'),
              'non' => is_empty($node, 'field_main_interval_non'),
              'str' => is_empty($node, 'field_main_interval_str'),
              'int' => is_empty($node, 'field_main_interval_int'),
            ),
          ),
          'number' => array(
            'main' => array(
              'type' => is_empty($node, 'field_number_main_type'),
              'view' => is_empty($node, 'field_number_main_view'),
              'setting' => is_empty($node, 'field_number_main_setting'),
            ),
            'pattern' => array(
              'pic' => is_empty($node, 'field_number_pattern_pic'),
              'own' => is_empty($node, 'field_number_pattern_own'),
              'table' => is_empty($node, 'field_number_pattern_table'),
              'own2' => is_empty($node, 'field_number_pattern_own2'),
            ),
            'font' => array(
              'font' => is_empty($node, 'field_number_font_font'),
              'size' => is_empty($node, 'field_number_font_size'),
              'align' => is_empty($node, 'field_number_font_align'),
              'typeface' => is_empty($node, 'field_number_font_typeface'),
              'color' => is_empty($node, 'field_number_font_color'),
              'background' => is_empty($node, 'field_number_font_background'),
            ),
          ),
          'title' => array(
            'main' => array(
              'level' => is_empty($node, 'field_title_main_level'),
              'spelling' => is_empty($node, 'field_title_main_spelling'),
              'pattern' => is_empty($node, 'field_title_main_pattern'),
              'own' => is_empty($node, 'field_title_main_own'),
              'text' => is_empty($node, 'field_title_main_text'),
              'interval' => is_empty($node, 'field_title_main_interval'),
              'after' => is_empty($node, 'field_title_main_after'),
              'first' => is_empty($node, 'field_title_main_first'),
              'firstan' => is_empty($node, 'field_title_main_firstan'),
              'second' => is_empty($node, 'field_title_main_second'),
              'secondan' => is_empty($node, 'field_title_main_secondan'),
            ),
            'font' => array(
              'font' => is_empty($node, 'field_title_font_font'),
              'size' => is_empty($node, 'field_title_font_size'),
              'align' => is_empty($node, 'field_title_font_align'),
              'typeface' => is_empty($node, 'field_title_font_typeface'),
              'color' => is_empty($node, 'field_title_font_color'),
              'background' => is_empty($node, 'field_title_font_background'),
            ),
            'number' => $title_number,
          ),
          'contents' => array(
            'main' => array(
              'position' => is_empty($node, 'field_contents_main_position'),
              'division' => is_empty($node, 'field_contents_main_division'),
              'setting' => is_empty($node, 'field_contents_main_setting'),
              'list' => is_empty($node, 'field_contents_main_list'),
            ),
            'font' => array(
              'font' => is_empty($node, 'field_contents_font_font'),
              'size' => is_empty($node, 'field_contents_font_size'),
              'align' => is_empty($node, 'field_contents_font_align'),
              'typeface' => is_empty($node, 'field_contents_font_typeface'),
              'color' => is_empty($node, 'field_contents_font_color'),
              'background' => is_empty($node, 'field_contents_font_background'),
            ),
          ),
          'pic' => array(
            'size' => array(
              'position' => is_empty($node, 'field_pic_size_valid'),
              'size_1' => is_empty($node, 'field_pic_size_1'),
              'size_2' => is_empty($node, 'field_pic_size_2'),
            ),
            'border' => array(
              'thickness' => is_empty($node, 'field_pic_border_thickness'),
              'color' => is_empty($node, 'field_pic_border_color'),
              'type' => is_empty($node, 'field_pic_border_type'),
            ),
            'align' => array(
              'align' => is_empty($node, 'field_pic_align_pic'),
            ),
            'label' => array(
              'setting' => is_empty($node, 'field_pic_label_setting'),
              'font' => is_empty($node, 'field_pic_label_font'),
              'size' => is_empty($node, 'field_pic_label_size'),
              'align' => is_empty($node, 'field_pic_label_align'),
              'typeface' => is_empty($node, 'field_pic_label_typeface'),
              'color' => is_empty($node, 'field_pic_label_color'),
              'background' => is_empty($node, 'field_pic_label_background'),
            ),
            'indents' => array(
              'top' => is_empty($node, 'field_pic_indents_top'),
              'top2' => is_empty($node, 'field_pic_indents_top2'),
              'text' => is_empty($node, 'field_pic_indents_text'),
              'text2' => is_empty($node, 'field_pic_indents_text2'),
              'pic' => is_empty($node, 'field_pic_indents_pic'),
              'pic2' => is_empty($node, 'field_pic_indents_pic2'),
            ),
            'number' => array(
              'type' => is_empty($node, 'field_pic_number_type'),
              'view' => is_empty($node, 'field_pic_number_view'),
              'setting' => is_empty($node, 'field_pic_number_setting'),
            ),
          ),
          'table' => array(
            'label' => array(
              'location' => is_empty($node, 'field_table_label_location'),
              'font' => is_empty($node, 'field_table_label_font'),
              'size' => is_empty($node, 'field_table_label_size'),
              'align' => is_empty($node, 'field_table_label_align'),
              'typeface' => is_empty($node, 'field_table_label_typeface'),
              'color' => is_empty($node, 'field_table_label_color'),
              'background' => is_empty($node, 'field_table_label_background'),
              'header' => is_empty($node, 'field_table_label_header'),
              'number' => is_empty($node, 'field_table_label_number'),
              'line' => is_empty($node, 'field_table_label_line'),
              'continue' => is_empty($node, 'field_table_label_continue'),
              'continue2' => is_empty($node, 'field_table_label_continue2'),
            ),
            'indents' => array(
              'top' => is_empty($node, 'field_table_indents_top'),
              'top2' => is_empty($node, 'field_table_indents_top2'),
              'text' => is_empty($node, 'field_table_indents_text'),
              'text2' => is_empty($node, 'field_table_indents_text2'),
              'pic' => is_empty($node, 'field_table_indents_pic'),
              'pic2' => is_empty($node, 'field_table_indents_pic2'),
            ),
            'number' => array(
              'type' => is_empty($node, 'field_table_number_type'),
              'view' => is_empty($node, 'field_table_number_view'),
              'division' => is_empty($node, 'field_table_number_division'),
              'setting' => is_empty($node, 'field_table_number_setting'),
            ),
            'font' => array(
              'font' => is_empty($node, 'field_table_number_font'),
              'size' => is_empty($node, 'field_table_number_size'),
              'align' => is_empty($node, 'field_table_number_align'),
              'typeface' => is_empty($node, 'field_table_number_typeface'),
              'color' => is_empty($node, 'field_table_number_color'),
              'background' => is_empty($node, 'field_table_number_background'),
            ),
          ),
          'formula' => array(
            'indents' => array(
              'text' => is_empty($node, 'field_formula_indents_text'),
              'text2' => is_empty($node, 'field_formula_indents_text2'),
              'formula' => is_empty($node, 'f'),
              'formula2' => is_empty($node, 'field_formula_indents_formula2'),
            ),
            'number' => array(
              'type' => is_empty($node, 'field_formula_number_type'),
              'view' => is_empty($node, 'field_formula_number_view'),
              'division' => is_empty($node, 'field_formula_number_setting'),
            ),
          ),
          'list' => array(
            'formatting' => array(
              'level' => is_empty($node, 'field_list_formatting_level'),
              'indentatio' => is_empty($node, 'field_list_formatting_indentatio'),
              'number' => is_empty($node, 'field_list_formatting_number'),
              'main' => is_empty($node, 'field_list_formatting_main'),
              'valid' => is_empty($node, 'field_list_formatting_valid'),
            ),
            'number' => array(
              'type' => is_empty($node, 'field_list_number_type'),
              'number' => is_empty($node, 'field_list_number_1'),
            ),
            'font' => array(
              'font' => is_empty($node, 'field_list_font_font'),
              'size' => is_empty($node, 'field_list_font_size'),
              'align' => is_empty($node, 'field_list_font_align'),
              'typeface' => is_empty($node, 'field_list_font_typeface'),
              'color' => is_empty($node, 'field_list_font_color'),
              'background' => is_empty($node, 'field_list_font_background'),
            ),
            'quotes' => array(
              'main' => array(
                'symbol' => is_empty($node, 'field_quotes_main_symbol'),
              ),
            ),
          ),
        ),
      );
      $data = json_encode($processing, JSON_UNESCAPED_UNICODE);

      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 600,
        'headers' => array('Content-Type' => 'application/json; charset=utf-8'),
      );

      global $user;
      if ($user->uid == 3) {
        $result = drupal_http_request('http://192.168.3.55:21736', $options);
      } else {
        $result = drupal_http_request('http://192.168.3.55:21735', $options);
      }

      if ($result->code == 200) {
        drupal_set_message('Успешно отправлено');
        $status = 'В обработке';
        $percent = 0;
      } else {
        drupal_set_message("$result->code: $result->error", 'error');
        $status = 'Ошибка обработки';
        $percent = 0;
      }
      $processing_db = db_query("REPLACE {processing}
    SET
      entity_id = :eid,
      status = :status,
      demand_id = :did,
      percent = :percent,
      demand = :demand",
        array(
          ':eid' => $valueId,
          ':status' => $status,
          ':did' => $nid,
          ':demand' => $node->title,
          ':percent' => $percent));
    }
  }
}

function processing_form_remove($form, &$form_state)
{
  $name = $form_state['values']['list_docx'];
  foreach ($name as $value) {
    if ($value != 0) {
      $file = file_load($value);
      file_delete($file);
    }
  }
}

function processing_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id)
{
  $form['upload']['#process'] = array('processing_my_file_element_process');
  unset($form['actions']['next']);
}

function processing_my_file_element_process($element, &$form_state, $form)
{
  $element = file_managed_file_process($element, $form_state, $form);
  $element['upload_button']['#value'] = t('Upload');
  $element['#file'] = FALSE;
  $element['#value']['fid'] = 0;
  unset($element['upload_button']['#ajax']);
  unset($element['remove_button']);
  unset($element['#prefix']);
  unset($element['#suffix']);
  unset($element['filename']);
  return $element;
}

function processing_action_info()
{
  return array(
    'processing_my_custom_action' => array(
      'type' => 'file',
      'label' => 'Обработать',
      'configurable' => FALSE,
      'behavior' => array('view_property'),
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

function processing_my_custom_action_views_bulk_operations_form($options)
{
  $form = array();
  return $form;
}

function processing_my_custom_action_form($settings, &$form_state)
{
  $form = array();

  global $user;
  $nodes = db_select('node', 'n');
  $nodes->fields('n', array('nid', 'title'));
  $or = db_or();
  $or->condition('n.uid', $user->uid);
  $or->condition('n.uid', 1);
  $nodes->condition($or);
  $nodes->condition('n.type', 'demand_create');
  $list = $nodes->execute()->fetchAllKeyed();
  $form['list_settings'] = array(
    '#type' => 'select',
    '#title' => t('Demand create'),
    '#options' => $list,
  );
  return $form;
}

function processing_my_custom_action_submit($form, $form_state)
{
  $return = array();
  $return['list_settings'] = $form_state['values']['list_settings'];
  return $return;
}

function processing_my_custom_action(&$node, $context)
{

  if (!empty($context['list_settings'])) {
    $form = array();
    $form_state['values']['list_settings'] = $context['list_settings'];
    $form['list_docx']['#options'][$node->fid] = $node->filename;
    $form_state['values']['files_list'] = $node->fid;
    processing_form_submit($form, $form_state);
  } else form_error(t('Please, create a demand.'));
}
