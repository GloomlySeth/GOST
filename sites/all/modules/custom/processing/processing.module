<?php

/**
 * Implements hook_block_info().
 */
function processing_block_info() {
  $blocks = array();
  $blocks['processing_form_block'] = array(
    'info' => t('Processing form'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function processing_block_view($delta = '') {
  if ($delta == 'processing_form_block') {
    $block['subject'] = '';
    $block['content'] = drupal_get_form('processing_form');
  }
  return $block;
}

function term_name($tid){
  $tname = taxonomy_term_load($tid);
  return (!empty($tname->name)) ? $tname->name : 0;
}

function is_empty($value){
  return (!empty($value)) ? $value : 0;
}

/**
 * Implements hook_form().
 */
function processing_form($form, &$form_state) {
  global $user;
  $nodes = db_select('node', 'n');
  $nodes->fields('n', array('nid', 'title'));
  $nodes->condition('n.uid', $user->uid);
  $nodes->condition('n.type', 'demand_create');
  $list = $nodes->execute()->fetchAllKeyed();
  $form['list_settings'] = array(
    '#type' => 'select',
    '#title' => '',
    '#options' => $list
  );
  $nodes = db_select('file_managed', 'f');
  $nodes->fields('f', array('fid', 'filename'));
  $nodes->condition('f.uid', $user->uid);
  $list = $nodes->execute()->fetchAllKeyed();
  $form['list_docx'] = array(
    '#type' => 'radios',
    '#title' => '',
    '#options' => $list
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Начать обработку',
  );
  return $form;
}

function processing_form_submit($form, &$form_state) {
  global $user;
  $name = $form_state['values']['list_docx'];
  $uri = db_select('file_managed', 'f');
  $uri->fields('f', array('uri'));
  $uri->condition('f.uid', $name);
  $uri->execute()->fetchField();
  $nid = $form_state['values']['list_settings'];
  $node = node_load($nid);
  $title_number = array();
  $list_number = array();
  if(!empty($node->field_title_number_r)) {
    foreach ($node->field_title_number_r['und'] as $key => $value) {
      $field_coll = field_collection_item_load($value['revision_id']);
      $title_number[] = array(
        'type' => is_empty($field_coll->field_title_number_type2['und'][0]['value']),
        'view' => is_empty(term_name($field_coll->field_title_number_view2)),
        'division' => is_empty(term_name($field_coll->field_title_number_division2)),
        'setting' => is_empty($field_coll->field_title_number_setting2['und'][0]['value']),
      );
    }
  }
  if(!empty($node->field_list_number_1)){
    foreach ($node->field_list_number_1['und'] as $key => $value) {
      $field_coll = field_collection_item_load($value['revision_id']);
      $list_number[] = array(
        'type' => is_empty($field_coll->field_list_number_type2['und'][0]['value']),
        'view' => is_empty(term_name($field_coll->field_list_number_view2)),
        'division' => is_empty(term_name($field_coll->field_list_number_division2)),
        'setting' => is_empty($field_coll->field_list_number_setting2['und'][0]['value']),
      );
    }
  }
  $processing = array(
    'user' => array(
    'uid' => $user->uid,
    ),
    'file' => array(
      'patch' => is_empty($uri),
      'name' => is_empty($form['list_docx']['#options'][$name]),
    ),
    'demands' => array(
      'name' => $node->title,
      'note' => is_empty($node->field_demand_note),
      'fields' => array(
        'top' => is_empty($node->field_fields_top),
        'bottom' => is_empty($node->field_fields_bottom),
        'left' => is_empty($node->field_fields_left),
        'right' => is_empty($node->field_fields_right),
      ),
      'paper' => array(
        'size' => is_empty($node->field_paper_size['und'][0]['value']),
        'orientation' => is_empty($node->field_paper_orientation['und'][0]['value']),
      ),
      'header' => array(
        'setting' => array(
          'font' => is_empty(term_name($node->field_header_setting_font)),
          'size' => is_empty(term_name($node->field_header_setting_size)),
          'align' => is_empty(term_name($node->field_header_setting_align)),
          'typeface' => is_empty(term_name($node->field_header_setting_typeface)),
          'color' => is_empty(term_name($node->field_header_setting_color)),
          'background' => is_empty(term_name($node->field_header_setting_background)),
          'setting' => is_empty($node->field_header_setting_text['und'][0]['value']),
        ),
        'number' => array(
          'number_page' => is_empty($node->field_header_number_page['und'][0]['value']),
        ),
        'filter' => array(
          'filter_from' => is_empty($node->field_header_filter_from),
          'filter_skip' => is_empty($node->field_header_filter_skip),
        ),
      ),
      'main' => array(
        'font' => array(
          'font' => is_empty(term_name($node->field_main_font_font)),
          'size' => is_empty(term_name($node->field_main_font_size)),
          'align' => is_empty(term_name($node->field_main_font_align)),
          'typeface' => is_empty(term_name($node->field_main_font_typeface)),
          'color' => is_empty(term_name($node->field_main_font_color)),
          'background' => is_empty(term_name($node->field_main_font_background)),
        ),
        'columns' => array(
          'text' => is_empty($node->field_main_columns_text),
          'number' => is_empty($node->field_main_columns_number),
          'division' => is_empty($node->field_main_columns_division['und'][0]['value']),
          'width' => is_empty($node->field_main_columns_width['und'][0]['value']),
        ),
        'margins' => array(
          'left' => is_empty($node->field_main_margins_left),
          'right' => is_empty($node->field_main_margins_right),
          'mirror' => is_empty($node->field_main_margins_mirror['und'][0]['value']),
          'str' => is_empty($node->field_main_margins_str),
          'on' => is_empty($node->field_main_margins_on),
          'shift' => is_empty($node->field_main_margins_shift['und'][0]['value']),
        ),
        'interval' => array(
          'page' => is_empty($node->field_main_interval_page['und'][0]['value']),
          'page2' => is_empty($node->field_main_interval_page2),
          'mirror' => is_empty($node->field_main_interval_shift['und'][0]['value']),
          'left' => is_empty($node->field_main_interval_left),
          'non' => is_empty($node->field_main_interval_non['und'][0]['value']),
          'shift' => is_empty($node->field_main_interval_str['und'][0]['value']),
          'int' => is_empty($node->field_main_interval_int),
        ),
      ),
      'number' => array(
        'main' => array(
          'type' => is_empty($node->field_number_main_type),
          'view' => is_empty(term_name($node->field_number_main_view)),
          'setting' => is_empty($node->field_number_main_setting['und'][0]['value']),
        ),
        'pattern' => array(
          'pic' => is_empty($node->field_number_pattern_pic),
          'own' => is_empty($node->field_number_pattern_own),
          'table' => is_empty($node->field_number_pattern_table),
          'own2' => is_empty($node->field_number_pattern_own2),
        ),
      ),
      'title' => array(
        'main' => array(
          'level' => is_empty($node->field_title_main_level),
          'pattern' => is_empty($node->field_title_main_pattern),
          'own' => is_empty($node->field_title_main_own),
          'text' => is_empty($node->field_title_main_text['und'][0]['value']),
        ),
        'number' => $title_number,
      ),
      'contents' => array(
        'main' => array(
          'position' => is_empty($node->field_contents_main_position['und'][0]['value']),
          'division' => is_empty(term_name($node->field_contents_main_division)),
          'setting' => is_empty($node->field_contents_main_setting['und'][0]['value']),
          'list' => is_empty($node->field_contents_main_list['und'][0]['value']),
        ),
      ),
      'pic' => array(
        'size' => array(
          'position' => is_empty($node->field_pic_size_valid['und'][0]['value']),
          'size_1' => is_empty($node->field_pic_size_1),
          'size_2' => is_empty($node->field_pic_size_2),
        ),
        'border' => array(
          'thickness' => is_empty($node->field_pic_border_thickness),
          'color' => is_empty($node->field_pic_border_color),
          'type' => is_empty(term_name($node->field_pic_border_type)),
        ),
        'align' => array(
          'align' => is_empty(term_name($node->field_pic_align_pic)),
        ),
        'label' => array(
          'align' => is_empty(term_name($node->field_pic_label_align)),
          'setting' => is_empty($node->field_pic_label_setting['und'][0]['value']),
        ),
        'indents' => array(
          'top' => is_empty($node->field_pic_indents_top),
          'top2' => is_empty($node->field_pic_indents_top2['und'][0]['value']),
          'text' => is_empty($node->field_pic_indents_text),
          'text2' => is_empty($node->field_pic_indents_text2['und'][0]['value']),
          'pic' => is_empty($node->field_pic_indents_pic),
          'pic2' => is_empty($node->field_pic_indents_pic2['und'][0]['value']),
        ),
        'number' => array(
          'type' => is_empty($node->field_pic_number_type),
          'view' => is_empty(term_name($node->field_pic_number_view)),
          'setting' => is_empty($node->field_pic_number_setting['und'][0]['value']),
        ),
      ),
      'table' => array(
        'label' => array(
          'location' => is_empty($node->field_table_label_location),
          'font' => is_empty(term_name($node->field_table_label_font['und'][0]['tid'])),
          'size' => is_empty(term_name($node->field_table_label_size['und'][0]['tid'])),
          'align' => is_empty(term_name($node->field_table_label_align)),
          'typeface' => is_empty(term_name($node->field_table_label_typeface)),
          'color' => is_empty(term_name($node->field_table_label_color)),
          'background' => is_empty(term_name($node->field_table_label_background)),
          'header' => is_empty($node->field_table_label_header['und'][0]['value']),
          'number' => is_empty($node->field_table_label_number['und'][0]['value']),
          'line' => is_empty($node->field_table_label_line['und'][0]['value']),
          'continue' => is_empty($node->field_table_label_continue['und'][0]['value']),
          'continue2' => is_empty(term_name($node->field_table_label_continue2)),
        ),
        'number' => array(
          'type' => is_empty($node->field_table_number_type),
          'view' => is_empty(term_name($node->field_table_number_view)),
          'division' => is_empty(term_name($node->field_table_number_division)),
          'setting' => is_empty($node->field_table_number_setting['und'][0]['value']),
        ),
      ),
      'formula' => array(
        'indents' => array(
          'text' => is_empty($node->field_formula_indents_text),
          'text2' => is_empty($node->field_formula_indents_text2['und'][0]['value']),
          'formula' => is_empty($node->field_formula_indents_formula),
          'formula2' => is_empty($node->field_formula_indents_formula2['und'][0]['value']),
        ),
        'number' => array(
          'type' => is_empty($node->field_formula_number_type),
          'view' => is_empty(term_name($node->field_formula_number_division)),
          'division' => is_empty($node->field_formula_number_setting['und'][0]['value']),
        ),
      ),
      'list' => array(
        'formatting' => array(
          'level' => is_empty($node->field_list_formatting_level['und'][0]['value']),
          'indentatio' => is_empty($node->field_list_formatting_indentatio),
          'number' => is_empty($node->field_list_formatting_number),
          'main' => is_empty($node->field_list_formatting_main['und'][0]['value']),
          'valid' => is_empty($node->field_list_formatting_valid),
        ),
        'number' => $list_number,
      ),
      'quotes' => array(
        'main' => array(
          'symbol' => is_empty($node->field_quotes_main_symbol['und'][0]['value']),
        ),
      ),
    ),

  );
  $data = json_encode($processing);
  
  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/json'),
  );
  $result = drupal_http_request('http://192.168.3.55:21735', $options);
  ($result->code == 200) ? drupal_set_message('Успешно отправлено') : drupal_set_message("$result->code: $result->error", 'error');
}
